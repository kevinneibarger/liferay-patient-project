/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.patient.registration.model.impl;

import com.liferay.patient.registration.model.PatientRegistration;
import com.liferay.patient.registration.model.PatientRegistrationModel;
import com.liferay.patient.registration.model.PatientRegistrationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PatientRegistration service. Represents a row in the &quot;PatientReg_PatientRegistration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.patient.registration.model.PatientRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PatientRegistrationImpl}.
 * </p>
 *
 * @author kneibarger
 * @see PatientRegistrationImpl
 * @see com.liferay.patient.registration.model.PatientRegistration
 * @see com.liferay.patient.registration.model.PatientRegistrationModel
 * @generated
 */
@JSON(strict = true)
public class PatientRegistrationModelImpl extends BaseModelImpl<PatientRegistration>
	implements PatientRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a patient registration model instance should use the {@link com.liferay.patient.registration.model.PatientRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "PatientReg_PatientRegistration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "patientRegistrationId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "firstName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "address1", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "state_", Types.VARCHAR },
			{ "zipCode", Types.VARCHAR },
			{ "emailAddr", Types.VARCHAR },
			{ "dob", Types.VARCHAR },
			{ "optIn", Types.INTEGER },
			{ "phoneNumber", Types.VARCHAR },
			{ "pcpFirstName", Types.VARCHAR },
			{ "pcpLastName", Types.VARCHAR },
			{ "pcpAddress", Types.VARCHAR },
			{ "pcpCity", Types.VARCHAR },
			{ "pcpState", Types.VARCHAR },
			{ "pcpZipCode", Types.VARCHAR },
			{ "referringPractice", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table PatientReg_PatientRegistration (uuid_ VARCHAR(75) null,patientRegistrationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,address1 VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,zipCode VARCHAR(75) null,emailAddr VARCHAR(75) null,dob VARCHAR(75) null,optIn INTEGER,phoneNumber VARCHAR(75) null,pcpFirstName VARCHAR(75) null,pcpLastName VARCHAR(75) null,pcpAddress VARCHAR(75) null,pcpCity VARCHAR(75) null,pcpState VARCHAR(75) null,pcpZipCode VARCHAR(75) null,referringPractice VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table PatientReg_PatientRegistration";
	public static final String ORDER_BY_JPQL = " ORDER BY patientRegistration.patientRegistrationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PatientReg_PatientRegistration.patientRegistrationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.patient.registration.model.PatientRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.patient.registration.model.PatientRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.patient.registration.model.PatientRegistration"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long FIRSTNAME_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long LASTNAME_COLUMN_BITMASK = 8L;
	public static long OPTIN_COLUMN_BITMASK = 16L;
	public static long PATIENTREGISTRATIONID_COLUMN_BITMASK = 32L;
	public static long UUID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PatientRegistration toModel(PatientRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PatientRegistration model = new PatientRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setPatientRegistrationId(soapModel.getPatientRegistrationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());
		model.setAddress1(soapModel.getAddress1());
		model.setCity(soapModel.getCity());
		model.setState(soapModel.getState());
		model.setZipCode(soapModel.getZipCode());
		model.setEmailAddr(soapModel.getEmailAddr());
		model.setDob(soapModel.getDob());
		model.setOptIn(soapModel.getOptIn());
		model.setPhoneNumber(soapModel.getPhoneNumber());
		model.setPcpFirstName(soapModel.getPcpFirstName());
		model.setPcpLastName(soapModel.getPcpLastName());
		model.setPcpAddress(soapModel.getPcpAddress());
		model.setPcpCity(soapModel.getPcpCity());
		model.setPcpState(soapModel.getPcpState());
		model.setPcpZipCode(soapModel.getPcpZipCode());
		model.setReferringPractice(soapModel.getReferringPractice());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PatientRegistration> toModels(
		PatientRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PatientRegistration> models = new ArrayList<PatientRegistration>(soapModels.length);

		for (PatientRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.patient.registration.model.PatientRegistration"));

	public PatientRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _patientRegistrationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPatientRegistrationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _patientRegistrationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PatientRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return PatientRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("patientRegistrationId", getPatientRegistrationId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("firstName", getFirstName());
		attributes.put("lastName", getLastName());
		attributes.put("address1", getAddress1());
		attributes.put("city", getCity());
		attributes.put("state", getState());
		attributes.put("zipCode", getZipCode());
		attributes.put("emailAddr", getEmailAddr());
		attributes.put("dob", getDob());
		attributes.put("optIn", getOptIn());
		attributes.put("phoneNumber", getPhoneNumber());
		attributes.put("pcpFirstName", getPcpFirstName());
		attributes.put("pcpLastName", getPcpLastName());
		attributes.put("pcpAddress", getPcpAddress());
		attributes.put("pcpCity", getPcpCity());
		attributes.put("pcpState", getPcpState());
		attributes.put("pcpZipCode", getPcpZipCode());
		attributes.put("referringPractice", getReferringPractice());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long patientRegistrationId = (Long)attributes.get(
				"patientRegistrationId");

		if (patientRegistrationId != null) {
			setPatientRegistrationId(patientRegistrationId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		String address1 = (String)attributes.get("address1");

		if (address1 != null) {
			setAddress1(address1);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		String zipCode = (String)attributes.get("zipCode");

		if (zipCode != null) {
			setZipCode(zipCode);
		}

		String emailAddr = (String)attributes.get("emailAddr");

		if (emailAddr != null) {
			setEmailAddr(emailAddr);
		}

		String dob = (String)attributes.get("dob");

		if (dob != null) {
			setDob(dob);
		}

		Integer optIn = (Integer)attributes.get("optIn");

		if (optIn != null) {
			setOptIn(optIn);
		}

		String phoneNumber = (String)attributes.get("phoneNumber");

		if (phoneNumber != null) {
			setPhoneNumber(phoneNumber);
		}

		String pcpFirstName = (String)attributes.get("pcpFirstName");

		if (pcpFirstName != null) {
			setPcpFirstName(pcpFirstName);
		}

		String pcpLastName = (String)attributes.get("pcpLastName");

		if (pcpLastName != null) {
			setPcpLastName(pcpLastName);
		}

		String pcpAddress = (String)attributes.get("pcpAddress");

		if (pcpAddress != null) {
			setPcpAddress(pcpAddress);
		}

		String pcpCity = (String)attributes.get("pcpCity");

		if (pcpCity != null) {
			setPcpCity(pcpCity);
		}

		String pcpState = (String)attributes.get("pcpState");

		if (pcpState != null) {
			setPcpState(pcpState);
		}

		String pcpZipCode = (String)attributes.get("pcpZipCode");

		if (pcpZipCode != null) {
			setPcpZipCode(pcpZipCode);
		}

		String referringPractice = (String)attributes.get("referringPractice");

		if (referringPractice != null) {
			setReferringPractice(referringPractice);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPatientRegistrationId() {
		return _patientRegistrationId;
	}

	@Override
	public void setPatientRegistrationId(long patientRegistrationId) {
		_columnBitmask |= PATIENTREGISTRATIONID_COLUMN_BITMASK;

		if (!_setOriginalPatientRegistrationId) {
			_setOriginalPatientRegistrationId = true;

			_originalPatientRegistrationId = _patientRegistrationId;
		}

		_patientRegistrationId = patientRegistrationId;
	}

	public long getOriginalPatientRegistrationId() {
		return _originalPatientRegistrationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_columnBitmask |= FIRSTNAME_COLUMN_BITMASK;

		if (_originalFirstName == null) {
			_originalFirstName = _firstName;
		}

		_firstName = firstName;
	}

	public String getOriginalFirstName() {
		return GetterUtil.getString(_originalFirstName);
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_columnBitmask |= LASTNAME_COLUMN_BITMASK;

		if (_originalLastName == null) {
			_originalLastName = _lastName;
		}

		_lastName = lastName;
	}

	public String getOriginalLastName() {
		return GetterUtil.getString(_originalLastName);
	}

	@JSON
	@Override
	public String getAddress1() {
		if (_address1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _address1;
		}
	}

	@Override
	public void setAddress1(String address1) {
		_address1 = address1;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@JSON
	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		_zipCode = zipCode;
	}

	@JSON
	@Override
	public String getEmailAddr() {
		if (_emailAddr == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddr;
		}
	}

	@Override
	public void setEmailAddr(String emailAddr) {
		_emailAddr = emailAddr;
	}

	@JSON
	@Override
	public String getDob() {
		if (_dob == null) {
			return StringPool.BLANK;
		}
		else {
			return _dob;
		}
	}

	@Override
	public void setDob(String dob) {
		_dob = dob;
	}

	@JSON
	@Override
	public int getOptIn() {
		return _optIn;
	}

	@Override
	public void setOptIn(int optIn) {
		_columnBitmask |= OPTIN_COLUMN_BITMASK;

		if (!_setOriginalOptIn) {
			_setOriginalOptIn = true;

			_originalOptIn = _optIn;
		}

		_optIn = optIn;
	}

	public int getOriginalOptIn() {
		return _originalOptIn;
	}

	@JSON
	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		_phoneNumber = phoneNumber;
	}

	@JSON
	@Override
	public String getPcpFirstName() {
		if (_pcpFirstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _pcpFirstName;
		}
	}

	@Override
	public void setPcpFirstName(String pcpFirstName) {
		_pcpFirstName = pcpFirstName;
	}

	@JSON
	@Override
	public String getPcpLastName() {
		if (_pcpLastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _pcpLastName;
		}
	}

	@Override
	public void setPcpLastName(String pcpLastName) {
		_pcpLastName = pcpLastName;
	}

	@JSON
	@Override
	public String getPcpAddress() {
		if (_pcpAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _pcpAddress;
		}
	}

	@Override
	public void setPcpAddress(String pcpAddress) {
		_pcpAddress = pcpAddress;
	}

	@JSON
	@Override
	public String getPcpCity() {
		if (_pcpCity == null) {
			return StringPool.BLANK;
		}
		else {
			return _pcpCity;
		}
	}

	@Override
	public void setPcpCity(String pcpCity) {
		_pcpCity = pcpCity;
	}

	@JSON
	@Override
	public String getPcpState() {
		if (_pcpState == null) {
			return StringPool.BLANK;
		}
		else {
			return _pcpState;
		}
	}

	@Override
	public void setPcpState(String pcpState) {
		_pcpState = pcpState;
	}

	@JSON
	@Override
	public String getPcpZipCode() {
		if (_pcpZipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _pcpZipCode;
		}
	}

	@Override
	public void setPcpZipCode(String pcpZipCode) {
		_pcpZipCode = pcpZipCode;
	}

	@JSON
	@Override
	public String getReferringPractice() {
		if (_referringPractice == null) {
			return StringPool.BLANK;
		}
		else {
			return _referringPractice;
		}
	}

	@Override
	public void setReferringPractice(String referringPractice) {
		_referringPractice = referringPractice;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				PatientRegistration.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PatientRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PatientRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PatientRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PatientRegistrationImpl patientRegistrationImpl = new PatientRegistrationImpl();

		patientRegistrationImpl.setUuid(getUuid());
		patientRegistrationImpl.setPatientRegistrationId(getPatientRegistrationId());
		patientRegistrationImpl.setGroupId(getGroupId());
		patientRegistrationImpl.setCompanyId(getCompanyId());
		patientRegistrationImpl.setUserId(getUserId());
		patientRegistrationImpl.setUserName(getUserName());
		patientRegistrationImpl.setCreateDate(getCreateDate());
		patientRegistrationImpl.setModifiedDate(getModifiedDate());
		patientRegistrationImpl.setFirstName(getFirstName());
		patientRegistrationImpl.setLastName(getLastName());
		patientRegistrationImpl.setAddress1(getAddress1());
		patientRegistrationImpl.setCity(getCity());
		patientRegistrationImpl.setState(getState());
		patientRegistrationImpl.setZipCode(getZipCode());
		patientRegistrationImpl.setEmailAddr(getEmailAddr());
		patientRegistrationImpl.setDob(getDob());
		patientRegistrationImpl.setOptIn(getOptIn());
		patientRegistrationImpl.setPhoneNumber(getPhoneNumber());
		patientRegistrationImpl.setPcpFirstName(getPcpFirstName());
		patientRegistrationImpl.setPcpLastName(getPcpLastName());
		patientRegistrationImpl.setPcpAddress(getPcpAddress());
		patientRegistrationImpl.setPcpCity(getPcpCity());
		patientRegistrationImpl.setPcpState(getPcpState());
		patientRegistrationImpl.setPcpZipCode(getPcpZipCode());
		patientRegistrationImpl.setReferringPractice(getReferringPractice());

		patientRegistrationImpl.resetOriginalValues();

		return patientRegistrationImpl;
	}

	@Override
	public int compareTo(PatientRegistration patientRegistration) {
		long primaryKey = patientRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PatientRegistration)) {
			return false;
		}

		PatientRegistration patientRegistration = (PatientRegistration)obj;

		long primaryKey = patientRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PatientRegistrationModelImpl patientRegistrationModelImpl = this;

		patientRegistrationModelImpl._originalUuid = patientRegistrationModelImpl._uuid;

		patientRegistrationModelImpl._originalPatientRegistrationId = patientRegistrationModelImpl._patientRegistrationId;

		patientRegistrationModelImpl._setOriginalPatientRegistrationId = false;

		patientRegistrationModelImpl._originalGroupId = patientRegistrationModelImpl._groupId;

		patientRegistrationModelImpl._setOriginalGroupId = false;

		patientRegistrationModelImpl._originalCompanyId = patientRegistrationModelImpl._companyId;

		patientRegistrationModelImpl._setOriginalCompanyId = false;

		patientRegistrationModelImpl._originalFirstName = patientRegistrationModelImpl._firstName;

		patientRegistrationModelImpl._originalLastName = patientRegistrationModelImpl._lastName;

		patientRegistrationModelImpl._originalOptIn = patientRegistrationModelImpl._optIn;

		patientRegistrationModelImpl._setOriginalOptIn = false;

		patientRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PatientRegistration> toCacheModel() {
		PatientRegistrationCacheModel patientRegistrationCacheModel = new PatientRegistrationCacheModel();

		patientRegistrationCacheModel.uuid = getUuid();

		String uuid = patientRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			patientRegistrationCacheModel.uuid = null;
		}

		patientRegistrationCacheModel.patientRegistrationId = getPatientRegistrationId();

		patientRegistrationCacheModel.groupId = getGroupId();

		patientRegistrationCacheModel.companyId = getCompanyId();

		patientRegistrationCacheModel.userId = getUserId();

		patientRegistrationCacheModel.userName = getUserName();

		String userName = patientRegistrationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			patientRegistrationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			patientRegistrationCacheModel.createDate = createDate.getTime();
		}
		else {
			patientRegistrationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			patientRegistrationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			patientRegistrationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		patientRegistrationCacheModel.firstName = getFirstName();

		String firstName = patientRegistrationCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			patientRegistrationCacheModel.firstName = null;
		}

		patientRegistrationCacheModel.lastName = getLastName();

		String lastName = patientRegistrationCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			patientRegistrationCacheModel.lastName = null;
		}

		patientRegistrationCacheModel.address1 = getAddress1();

		String address1 = patientRegistrationCacheModel.address1;

		if ((address1 != null) && (address1.length() == 0)) {
			patientRegistrationCacheModel.address1 = null;
		}

		patientRegistrationCacheModel.city = getCity();

		String city = patientRegistrationCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			patientRegistrationCacheModel.city = null;
		}

		patientRegistrationCacheModel.state = getState();

		String state = patientRegistrationCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			patientRegistrationCacheModel.state = null;
		}

		patientRegistrationCacheModel.zipCode = getZipCode();

		String zipCode = patientRegistrationCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			patientRegistrationCacheModel.zipCode = null;
		}

		patientRegistrationCacheModel.emailAddr = getEmailAddr();

		String emailAddr = patientRegistrationCacheModel.emailAddr;

		if ((emailAddr != null) && (emailAddr.length() == 0)) {
			patientRegistrationCacheModel.emailAddr = null;
		}

		patientRegistrationCacheModel.dob = getDob();

		String dob = patientRegistrationCacheModel.dob;

		if ((dob != null) && (dob.length() == 0)) {
			patientRegistrationCacheModel.dob = null;
		}

		patientRegistrationCacheModel.optIn = getOptIn();

		patientRegistrationCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = patientRegistrationCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			patientRegistrationCacheModel.phoneNumber = null;
		}

		patientRegistrationCacheModel.pcpFirstName = getPcpFirstName();

		String pcpFirstName = patientRegistrationCacheModel.pcpFirstName;

		if ((pcpFirstName != null) && (pcpFirstName.length() == 0)) {
			patientRegistrationCacheModel.pcpFirstName = null;
		}

		patientRegistrationCacheModel.pcpLastName = getPcpLastName();

		String pcpLastName = patientRegistrationCacheModel.pcpLastName;

		if ((pcpLastName != null) && (pcpLastName.length() == 0)) {
			patientRegistrationCacheModel.pcpLastName = null;
		}

		patientRegistrationCacheModel.pcpAddress = getPcpAddress();

		String pcpAddress = patientRegistrationCacheModel.pcpAddress;

		if ((pcpAddress != null) && (pcpAddress.length() == 0)) {
			patientRegistrationCacheModel.pcpAddress = null;
		}

		patientRegistrationCacheModel.pcpCity = getPcpCity();

		String pcpCity = patientRegistrationCacheModel.pcpCity;

		if ((pcpCity != null) && (pcpCity.length() == 0)) {
			patientRegistrationCacheModel.pcpCity = null;
		}

		patientRegistrationCacheModel.pcpState = getPcpState();

		String pcpState = patientRegistrationCacheModel.pcpState;

		if ((pcpState != null) && (pcpState.length() == 0)) {
			patientRegistrationCacheModel.pcpState = null;
		}

		patientRegistrationCacheModel.pcpZipCode = getPcpZipCode();

		String pcpZipCode = patientRegistrationCacheModel.pcpZipCode;

		if ((pcpZipCode != null) && (pcpZipCode.length() == 0)) {
			patientRegistrationCacheModel.pcpZipCode = null;
		}

		patientRegistrationCacheModel.referringPractice = getReferringPractice();

		String referringPractice = patientRegistrationCacheModel.referringPractice;

		if ((referringPractice != null) && (referringPractice.length() == 0)) {
			patientRegistrationCacheModel.referringPractice = null;
		}

		return patientRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(51);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", patientRegistrationId=");
		sb.append(getPatientRegistrationId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", address1=");
		sb.append(getAddress1());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", zipCode=");
		sb.append(getZipCode());
		sb.append(", emailAddr=");
		sb.append(getEmailAddr());
		sb.append(", dob=");
		sb.append(getDob());
		sb.append(", optIn=");
		sb.append(getOptIn());
		sb.append(", phoneNumber=");
		sb.append(getPhoneNumber());
		sb.append(", pcpFirstName=");
		sb.append(getPcpFirstName());
		sb.append(", pcpLastName=");
		sb.append(getPcpLastName());
		sb.append(", pcpAddress=");
		sb.append(getPcpAddress());
		sb.append(", pcpCity=");
		sb.append(getPcpCity());
		sb.append(", pcpState=");
		sb.append(getPcpState());
		sb.append(", pcpZipCode=");
		sb.append(getPcpZipCode());
		sb.append(", referringPractice=");
		sb.append(getReferringPractice());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(79);

		sb.append("<model><model-name>");
		sb.append("com.liferay.patient.registration.model.PatientRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>patientRegistrationId</column-name><column-value><![CDATA[");
		sb.append(getPatientRegistrationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address1</column-name><column-value><![CDATA[");
		sb.append(getAddress1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zipCode</column-name><column-value><![CDATA[");
		sb.append(getZipCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddr</column-name><column-value><![CDATA[");
		sb.append(getEmailAddr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dob</column-name><column-value><![CDATA[");
		sb.append(getDob());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>optIn</column-name><column-value><![CDATA[");
		sb.append(getOptIn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phoneNumber</column-name><column-value><![CDATA[");
		sb.append(getPhoneNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pcpFirstName</column-name><column-value><![CDATA[");
		sb.append(getPcpFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pcpLastName</column-name><column-value><![CDATA[");
		sb.append(getPcpLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pcpAddress</column-name><column-value><![CDATA[");
		sb.append(getPcpAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pcpCity</column-name><column-value><![CDATA[");
		sb.append(getPcpCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pcpState</column-name><column-value><![CDATA[");
		sb.append(getPcpState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pcpZipCode</column-name><column-value><![CDATA[");
		sb.append(getPcpZipCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referringPractice</column-name><column-value><![CDATA[");
		sb.append(getReferringPractice());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PatientRegistration.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PatientRegistration.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _patientRegistrationId;
	private long _originalPatientRegistrationId;
	private boolean _setOriginalPatientRegistrationId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _firstName;
	private String _originalFirstName;
	private String _lastName;
	private String _originalLastName;
	private String _address1;
	private String _city;
	private String _state;
	private String _zipCode;
	private String _emailAddr;
	private String _dob;
	private int _optIn;
	private int _originalOptIn;
	private boolean _setOriginalOptIn;
	private String _phoneNumber;
	private String _pcpFirstName;
	private String _pcpLastName;
	private String _pcpAddress;
	private String _pcpCity;
	private String _pcpState;
	private String _pcpZipCode;
	private String _referringPractice;
	private long _columnBitmask;
	private PatientRegistration _escapedModel;
}